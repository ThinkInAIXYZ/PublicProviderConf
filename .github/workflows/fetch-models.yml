name: Fetch AI Models

on:
  schedule:
    # Run daily at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      providers:
        description: 'Comma-separated list of providers to fetch (leave empty for all)'
        required: false
        default: ''
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/fetch-models.yml'
  push:
    tags:
      - 'release-*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  fetch-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build project
      run: cargo build --release
      
    - name: Run tests
      run: cargo test
      
    - name: Create dist directory
      run: mkdir -p dist
      
    - name: Fetch model data
      run: |
        if [ -n "${{ github.event.inputs.providers }}" ]; then
          cargo run --release -- fetch-providers -p "${{ github.event.inputs.providers }}" -o dist
        else
          cargo run --release -- fetch-all -o dist
        fi
      env:
        # Add API keys as secrets if needed
        # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        # OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        
    - name: Validate generated JSON files
      run: |
        echo "Validating JSON files..."
        for file in dist/*.json; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            jq empty "$file" || (echo "Invalid JSON in $file" && exit 1)
          fi
        done
        
    - name: List generated files
      run: |
        echo "Generated files:"
        ls -la dist/
        echo "File sizes:"
        du -h dist/*.json
        
    - name: Generate release info
      id: release_info
      run: |
        # Extract provider information from all.json
        if [ -f "dist/all.json" ]; then
          TOTAL_MODELS=$(jq -r '.totalModels' dist/all.json)
          PROVIDERS=$(jq -r '.providers | keys | join(", ")' dist/all.json)
          PROVIDER_COUNT=$(jq -r '.providers | keys | length' dist/all.json)
          echo "total_models=$TOTAL_MODELS" >> $GITHUB_OUTPUT
          echo "providers=$PROVIDERS" >> $GITHUB_OUTPUT
          echo "provider_count=$PROVIDER_COUNT" >> $GITHUB_OUTPUT
        else
          echo "total_models=0" >> $GITHUB_OUTPUT
          echo "providers=none" >> $GITHUB_OUTPUT
          echo "provider_count=0" >> $GITHUB_OUTPUT
        fi
        
        # Generate timestamp
        echo "timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "date_short=$(date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
        
    - name: Commit and push updates
      if: github.ref_type != 'tag'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Copy generated files to provider_configs for direct access
        cp -r dist/* provider_configs/ || true
        
        git add provider_configs/
        if ! git diff --staged --quiet; then
          git commit -m "ü§ñ Update model configurations - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "No changes to commit"
        fi
        
    - name: Create Release Assets
      run: |
        # Create tarball of all JSON files with proper naming
        cd dist
        if [ "${{ github.ref_type }}" = "tag" ]; then
          # For tag releases, use the tag name
          TAG_NAME="${{ github.ref_name }}"
          tar -czf "../provider-configs-${TAG_NAME}.tar.gz" *.json
          # Also create individual provider archives
          for file in *.json; do
            if [ "$file" != "all.json" ]; then
              provider_name=$(basename "$file" .json)
              tar -czf "../${provider_name}-${TAG_NAME}.tar.gz" "$file"
            fi
          done
        else
          # For scheduled/manual runs, use date
          tar -czf "../provider-configs-${{ steps.release_info.outputs.date_short }}.tar.gz" *.json
        fi
        cd ..
        
    - name: Upload Artifacts (non-tag)
      if: github.ref_type != 'tag'
      uses: actions/upload-artifact@v4
      with:
        name: provider-configs-${{ steps.release_info.outputs.date_short }}
        path: |
          dist/*.json
          provider-configs-*.tar.gz
        retention-days: 30
        
    - name: Create Release (scheduled)
      if: github.event_name == 'schedule'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: auto-${{ steps.release_info.outputs.date_short }}
        name: Daily Auto Release ${{ steps.release_info.outputs.date_short }}
        body: |
          ü§ñ **Automated Daily Release of AI Model Configurations**
          
          **Generated:** ${{ steps.release_info.outputs.timestamp }}
          **Total Models:** ${{ steps.release_info.outputs.total_models }}
          **Providers:** ${{ steps.release_info.outputs.provider_count }} (${{ steps.release_info.outputs.providers }})
          
          ## üì¶ What's Included
          
          This release contains the latest model information from all configured providers:
          - `provider-configs-${{ steps.release_info.outputs.date_short }}.tar.gz` - Complete package with all provider data
          - Individual JSON files for each provider
          - Aggregated JSON with all models combined
          
          ## üîÑ How to Use
          
          Download and extract the files to access standardized AI model configurations for your applications.
          
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/auto-${{ steps.release_info.outputs.date_short }}/provider-configs-${{ steps.release_info.outputs.date_short }}.tar.gz
          tar -xzf provider-configs-${{ steps.release_info.outputs.date_short }}.tar.gz
          ```
        files: provider-configs-*.tar.gz
        draft: false
        prerelease: false
        
    - name: Create Release (tagged)
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          üè∑Ô∏è **Tagged Release of AI Model Configurations**
          
          **Release Version:** ${{ github.ref_name }}
          **Generated:** ${{ steps.release_info.outputs.timestamp }}
          **Total Models:** ${{ steps.release_info.outputs.total_models }}
          **Providers:** ${{ steps.release_info.outputs.provider_count }} (${{ steps.release_info.outputs.providers }})
          
          ## üì¶ Available Downloads
          
          ### Complete Package
          - `provider-configs-${{ github.ref_name }}.tar.gz` - All provider configurations
          
          ### Individual Provider Packages
          Available individual provider archives for selective downloading.
          
          ### Raw JSON Files
          Individual JSON files are also available as release assets for direct access.
          
          ## üìä Provider Details
          
          | Provider | Models Available |
          |----------|-----------------|
          ${{ steps.release_info.outputs.providers != 'none' && '| Multiple providers | See all.json |' || '| No providers | 0 |' }}
          
          ## üîÑ Integration
          
          ### Direct JSON Access
          ```javascript
          // Access aggregated data
          const response = await fetch('https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/all.json');
          const modelData = await response.json();
          ```
          
          ### Complete Package Download
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/provider-configs-${{ github.ref_name }}.tar.gz
          tar -xzf provider-configs-${{ github.ref_name }}.tar.gz
          ```
          
          ---
          
          *This release was automatically generated from the latest provider data.*
        files: |
          dist/*.json
          *.tar.gz
        draft: false
        prerelease: false